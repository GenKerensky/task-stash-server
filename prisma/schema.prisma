// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id // NanoID
  email         String          @unique
  data          Bytes // Encrypted
  publicKey     String
  privateKey    String // Password protected by client
  verifier      String // Used for passwordless login
  salt          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stashes       Stash[]
  sharedStashes SharedStashes[]
  notifications Notification[]
}

model Stash {
  id         String          @id // NanoID
  data       Bytes // Encrypted
  owner      User            @relation(fields: [ownerId], references: [id])
  ownerId    String
  sharedWith SharedStashes[]
  updatedAt  DateTime        @updatedAt
  // Entities that can be stored in the stash
  tasks      Task[]
}

model SharedStashes {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  stash   Stash  @relation(fields: [stashId], references: [id])
  stashId String
  access  Access

  @@id([userId, stashId])
}

enum Access {
  READ
  WRITE
}

model Task {
  id        String   @id // NanoID
  data      Bytes // Encrypted
  stash     Stash    @relation(fields: [stashId], references: [id])
  stashId   String
  updatedAt DateTime @updatedAt
}

// Notifications created by the client to be sent to the user at the specified time
model Notification {
  id     String   @id // NanoID
  data   Bytes // Encrypted data the client will use to display the notification
  time   DateTime // Time to send the notification
  user   User     @relation(fields: [userId], references: [id])
  userId String
}
